name: build and release DEB package

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Version
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF_NAME#v}
          else
            VERSION="0.0.0-dev+$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pkg_name=kraken-clean_$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Packaging Structure
        run: | 
          PKG_NAME="${{ steps.version.outputs.pkg_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          mkdir -p ${PKG_NAME}/DEBIAN 
          mkdir -p ${PKG_NAME}/usr/local/bin 
          cp kraken-clean.sh ${PKG_NAME}/usr/local/bin/
          chmod +x ${PKG_NAME}/usr/local/bin/kraken-clean.sh
          
          cat <<EOF > ${PKG_NAME}/DEBIAN/control
          Package: kraken-clean
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: all
          Maintainer: M. Sanjay Uddith Raju <uddithmachiraju@gmail.com>
          Description: A simple bash script to clean up unused Docker resources.
          EOF

      - name: Build DEB Package
        run: dpkg-deb --build ${{ steps.version.outputs.pkg_name }}

      - name: Upload DEB Package
        uses: actions/upload-artifact@v4
        with:
          name: kraken-clean-deb
          path: ${{ steps.version.outputs.pkg_name }}.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download DEB Package
        uses: actions/download-artifact@v4
        with:
          name: kraken-clean-deb

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: '*.deb'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}